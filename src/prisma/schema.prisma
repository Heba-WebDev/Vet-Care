// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  Staff
  Admin
}

enum Title {
  Receptionist
  HR
  Manager
  Veterinarian
  Asistant
  Technician
}

model Staff {
  id              String      @id @default(uuid())
  name            String
  job_title       String
  job             Jobs        @relation(fields: [job_title], references: [title])
  permission_type Permission  @default(Staff)
  permission      Permissions @relation(fields: [permission_type], references: [type])
  email           String      @unique
  password        String
  phone_number    String
  verified        Boolean     @default(false)
}

model Veterinarians {
  id              String         @id @default(uuid())
  name            String
  job_title       String
  job             Jobs           @relation(fields: [job_title], references: [title])
  permission_type Permission     @default(Staff)
  permission      Permissions    @relation(fields: [permission_type], references: [type])
  appointments    Appointments[]
  email           String         @unique
  password        String
  phone_number    String
  verified        Boolean        @default(false)
}

model Owners {
  id           String         @id @default(uuid())
  name         String
  email        String
  phone_number String
  pets         Pets[]
  appointments Appointments[]
  transactions Transactions[]
}

model Pets {
  id           String         @id @default(uuid())
  name         String
  owner        Owners         @relation(fields: [owner_id], references: [id])
  owner_id     String
  appointments Appointments[]
}

model Jobs {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  staff         Staff[]
  veterinarians Veterinarians[]
}

model Permissions {
  id            Int             @id @default(autoincrement())
  type          Permission      @unique
  staff         Staff[]
  veterinarians Veterinarians[]
}

model Appointments {
  id         String        @id @default(uuid())
  date       DateTime
  vet        Veterinarians @relation(fields: [vet_id], references: [id])
  vet_id     String
  owner      Owners        @relation(fields: [owner_id], references: [id])
  owner_id   String
  pet        Pets          @relation(fields: [pet_id], references: [id])
  pet_id     String
  service    Services      @relation(fields: [service_id], references: [id])
  service_id String
}

model Services {
  id           String         @id @default(uuid())
  type         String         @unique
  price        Decimal
  appointments Appointments[]
}

model Transactions {
  id             String   @id @default(uuid())
  client_id      String
  client         Owners   @relation(fields: [client_id], references: [id])
  amount         Decimal
  date           DateTime
  payment_method String
}

model Notifications {
  id             String   @id @default(uuid())
  appointment_id String
  message        String
  date           DateTime
}

// Archieve tables

model FormerStaff {
  id           String   @id
  name         String
  email        String
  phone_number String
  job_title    String
  exit_date    DateTime
  exit_reason  String
}

model FormerVets {
  id           String   @id
  name         String
  email        String
  phone_number String
  job_title    String
  exit_date    DateTime
  exit_reason  String
}
