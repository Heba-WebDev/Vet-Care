generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Permission {
  Staff
  Admin
}

enum Title {
  Receptionist
  HR
  Manager
  Veterinarian
  Asistant
  Technician
}

enum Status {
  Paid
  Unpaid
}

enum Method {
  Cash
  Online
}

enum Animal {
  Cat
  Dog
  Horse
  Bird
  Snake
  Lizard
  Hamster
  Rat
  Rabbit
}

enum Gender {
  Male
  Female
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Staff {
  id              String      @id @default(uuid())
  name            String
  job_title       String
  job             Jobs        @relation(fields: [job_title], references: [title])
  permission_type Permission  @default(Staff)
  permission      Permissions @relation(fields: [permission_type], references: [type])
  email           String      @unique
  password        String
  phone_number    String
  verified        Boolean     @default(false)
}

model Veterinarians {
  id              String         @id @default(uuid())
  name            String
  job_title       String
  job             Jobs           @relation(fields: [job_title], references: [title])
  permission_type Permission     @default(Staff)
  permission      Permissions    @relation(fields: [permission_type], references: [type])
  appointments    Appointments[]
  email           String         @unique
  password        String
  phone_number    String
  verified        Boolean        @default(false)
}

model Owners {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  phone_number String         @unique
  pets         Pets[]
  appointments Appointments[]
  transactions Transactions[]
}

model Animals {
  id   Int    @id @default(autoincrement())
  type Animal @unique
  isSupported Boolean @default(true)
  isDeleted   Boolean @default(false)
  pets  Pets[]
}

model Pets {
  id           String         @id @default(uuid())
  name         String
  animal       Animals        @relation(fields: [animal_id], references: [id])
  animal_id    Int
  gender       Gender
  owner        Owners         @relation(fields: [owner_id], references: [id])
  owner_id     String
  appointments Appointments[]
  transactions Transactions[]
}

model Jobs {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  staff         Staff[]
  veterinarians Veterinarians[]
}

model Permissions {
  id            Int             @id @default(autoincrement())
  type          Permission      @unique
  staff         Staff[]
  veterinarians Veterinarians[]
}

model WorkingDays {
  id Int @id @default(autoincrement())
  day Day @unique
  active Boolean @default(true)
}

model Appointments {
  id           String        @id @default(uuid())
  date         String
  time         String
  vet          Veterinarians @relation(fields: [vet_id], references: [id])
  vet_id       String
  owner        Owners        @relation(fields: [owner_id], references: [id])
  owner_id     String
  pet          Pets          @relation(fields: [pet_id], references: [id])
  pet_id       String
  service      Services      @relation(fields: [service_type], references: [type])
  service_type String
}

model Services {
  id           Int            @id @default(autoincrement())
  type         String         @unique
  price        Decimal        @db.Decimal(10, 2)
  active       Boolean        @default(true)
  appointments Appointments[]
  transactions Transactions[]
}

model Transactions {
  id             String   @id @default(uuid())
  client_id      String
  client         Owners   @relation(fields: [client_id], references: [id])
  pet_id         String
  pet            Pets     @relation(fields: [pet_id], references: [id])
  service_name   String
  service        Services @relation(fields: [service_name], references: [type])
  amount         Decimal
  date           String
  time           String
  payment_method Method
  payment_id     String
  status         Status   @default(Unpaid)
  cancelled      Boolean  @default(false)
}

model Notifications {
  id             String   @id @default(uuid())
  appointment_id String
  message        String
  date           DateTime
}

model PublicHolidays {
  id   String    @id @default(uuid())
  name String
  date String
}

// Archieve tables

model FormerStaff {
  id           String   @id
  name         String
  email        String
  phone_number String
  job_title    String
  exit_date    DateTime
  exit_reason  String
}

model FormerVets {
  id           String   @id
  name         String
  email        String
  phone_number String
  job_title    String
  exit_date    DateTime
  exit_reason  String
}
